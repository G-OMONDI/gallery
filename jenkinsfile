pipeline {
    agent any

    stages {
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Run Tests') {
            steps {
                sh 'npm test'
            }
        }

        stage('Deploy to Render') {
            steps {
                echo 'Triggering Render deployment...'
                // Optionally add your Render webhook here
                // sh 'curl -X POST pipeline {
    agent any

    stages {
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Run Tests') {
            steps {
                sh 'npm test'
            }
        }

        stage('Deploy to Render') {
            steps {
                echo 'Triggering Render deployment...'
                // Optionally add your Render webhook here
                // sh 'curl -X POST https://api.render.com/deploy/srv-xxxxxxx'
            }
        }
    }

    post {
        failure {
            mail to: 'glen.omondi@student.moringaschool.com',
                 subject: "ðŸš¨ Jenkins Build Failed",
                 body: "Tests failed in Jenkins pipeline. Please investigate."
        }
    }
}
'
            }
        }
    }

    post {
        failure {
            mail to: 'glen.omondi@student.moringaschool.com',
                 subject: "ðŸš¨ Jenkins Build Failed",
                 body: "Tests failed in Jenkins pipeline. Please investigate."
        }
    }
}
// This Jenkinsfile defines a simple pipeline with one stage that prints a message to the console.
// It uses the declarative syntax of Jenkins pipelines, which is more structured and easier to read.
// The `agent any` directive allows the pipeline to run on any available agent.
// The `echo` step is used to print messages to the console output.
// This pipeline can be used to verify that Jenkins is set up correctly and can execute basic tasks